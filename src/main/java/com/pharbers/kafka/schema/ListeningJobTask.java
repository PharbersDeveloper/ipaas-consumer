/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pharbers.kafka.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ListeningJobTask extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5984903655678472067L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ListeningJobTask\",\"namespace\":\"com.pharbers.kafka.schema\",\"fields\":[{\"name\":\"JobId\",\"type\":\"string\"},{\"name\":\"Status\",\"type\":\"string\"},{\"name\":\"Message\",\"type\":\"string\"},{\"name\":\"Progress\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence JobId;
  @Deprecated public java.lang.CharSequence Status;
  @Deprecated public java.lang.CharSequence Message;
  @Deprecated public java.lang.CharSequence Progress;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ListeningJobTask() {}

  /**
   * All-args constructor.
   * @param JobId The new value for JobId
   * @param Status The new value for Status
   * @param Message The new value for Message
   * @param Progress The new value for Progress
   */
  public ListeningJobTask(java.lang.CharSequence JobId, java.lang.CharSequence Status, java.lang.CharSequence Message, java.lang.CharSequence Progress) {
    this.JobId = JobId;
    this.Status = Status;
    this.Message = Message;
    this.Progress = Progress;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return JobId;
    case 1: return Status;
    case 2: return Message;
    case 3: return Progress;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: JobId = (java.lang.CharSequence)value$; break;
    case 1: Status = (java.lang.CharSequence)value$; break;
    case 2: Message = (java.lang.CharSequence)value$; break;
    case 3: Progress = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'JobId' field.
   * @return The value of the 'JobId' field.
   */
  public java.lang.CharSequence getJobId() {
    return JobId;
  }

  /**
   * Sets the value of the 'JobId' field.
   * @param value the value to set.
   */
  public void setJobId(java.lang.CharSequence value) {
    this.JobId = value;
  }

  /**
   * Gets the value of the 'Status' field.
   * @return The value of the 'Status' field.
   */
  public java.lang.CharSequence getStatus() {
    return Status;
  }

  /**
   * Sets the value of the 'Status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.Status = value;
  }

  /**
   * Gets the value of the 'Message' field.
   * @return The value of the 'Message' field.
   */
  public java.lang.CharSequence getMessage() {
    return Message;
  }

  /**
   * Sets the value of the 'Message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.Message = value;
  }

  /**
   * Gets the value of the 'Progress' field.
   * @return The value of the 'Progress' field.
   */
  public java.lang.CharSequence getProgress() {
    return Progress;
  }

  /**
   * Sets the value of the 'Progress' field.
   * @param value the value to set.
   */
  public void setProgress(java.lang.CharSequence value) {
    this.Progress = value;
  }

  /**
   * Creates a new ListeningJobTask RecordBuilder.
   * @return A new ListeningJobTask RecordBuilder
   */
  public static com.pharbers.kafka.schema.ListeningJobTask.Builder newBuilder() {
    return new com.pharbers.kafka.schema.ListeningJobTask.Builder();
  }

  /**
   * Creates a new ListeningJobTask RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ListeningJobTask RecordBuilder
   */
  public static com.pharbers.kafka.schema.ListeningJobTask.Builder newBuilder(com.pharbers.kafka.schema.ListeningJobTask.Builder other) {
    return new com.pharbers.kafka.schema.ListeningJobTask.Builder(other);
  }

  /**
   * Creates a new ListeningJobTask RecordBuilder by copying an existing ListeningJobTask instance.
   * @param other The existing instance to copy.
   * @return A new ListeningJobTask RecordBuilder
   */
  public static com.pharbers.kafka.schema.ListeningJobTask.Builder newBuilder(com.pharbers.kafka.schema.ListeningJobTask other) {
    return new com.pharbers.kafka.schema.ListeningJobTask.Builder(other);
  }

  /**
   * RecordBuilder for ListeningJobTask instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ListeningJobTask>
    implements org.apache.avro.data.RecordBuilder<ListeningJobTask> {

    private java.lang.CharSequence JobId;
    private java.lang.CharSequence Status;
    private java.lang.CharSequence Message;
    private java.lang.CharSequence Progress;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pharbers.kafka.schema.ListeningJobTask.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.JobId)) {
        this.JobId = data().deepCopy(fields()[0].schema(), other.JobId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Status)) {
        this.Status = data().deepCopy(fields()[1].schema(), other.Status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Message)) {
        this.Message = data().deepCopy(fields()[2].schema(), other.Message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Progress)) {
        this.Progress = data().deepCopy(fields()[3].schema(), other.Progress);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ListeningJobTask instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pharbers.kafka.schema.ListeningJobTask other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.JobId)) {
        this.JobId = data().deepCopy(fields()[0].schema(), other.JobId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Status)) {
        this.Status = data().deepCopy(fields()[1].schema(), other.Status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Message)) {
        this.Message = data().deepCopy(fields()[2].schema(), other.Message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Progress)) {
        this.Progress = data().deepCopy(fields()[3].schema(), other.Progress);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'JobId' field.
      * @return The value.
      */
    public java.lang.CharSequence getJobId() {
      return JobId;
    }

    /**
      * Sets the value of the 'JobId' field.
      * @param value The value of 'JobId'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.ListeningJobTask.Builder setJobId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.JobId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'JobId' field has been set.
      * @return True if the 'JobId' field has been set, false otherwise.
      */
    public boolean hasJobId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'JobId' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.ListeningJobTask.Builder clearJobId() {
      JobId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return Status;
    }

    /**
      * Sets the value of the 'Status' field.
      * @param value The value of 'Status'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.ListeningJobTask.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Status' field has been set.
      * @return True if the 'Status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Status' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.ListeningJobTask.Builder clearStatus() {
      Status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return Message;
    }

    /**
      * Sets the value of the 'Message' field.
      * @param value The value of 'Message'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.ListeningJobTask.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.Message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Message' field has been set.
      * @return True if the 'Message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Message' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.ListeningJobTask.Builder clearMessage() {
      Message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Progress' field.
      * @return The value.
      */
    public java.lang.CharSequence getProgress() {
      return Progress;
    }

    /**
      * Sets the value of the 'Progress' field.
      * @param value The value of 'Progress'.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.ListeningJobTask.Builder setProgress(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.Progress = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Progress' field has been set.
      * @return True if the 'Progress' field has been set, false otherwise.
      */
    public boolean hasProgress() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Progress' field.
      * @return This builder.
      */
    public com.pharbers.kafka.schema.ListeningJobTask.Builder clearProgress() {
      Progress = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ListeningJobTask build() {
      try {
        ListeningJobTask record = new ListeningJobTask();
        record.JobId = fieldSetFlags()[0] ? this.JobId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Status = fieldSetFlags()[1] ? this.Status : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Message = fieldSetFlags()[2] ? this.Message : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.Progress = fieldSetFlags()[3] ? this.Progress : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
